/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.assystem_app;

import com.orientechnologies.orient.core.config.OGlobalConfiguration;
import com.orientechnologies.orient.core.db.ODatabasePool;
import com.orientechnologies.orient.core.db.ODatabaseSession;
import com.orientechnologies.orient.core.db.OLiveQueryMonitor;
import com.orientechnologies.orient.core.db.OrientDB;
import com.orientechnologies.orient.core.db.OrientDBConfig;
import com.orientechnologies.orient.core.db.OrientDBConfigBuilder;
import com.orientechnologies.orient.core.record.ORecord;
import com.orientechnologies.orient.core.record.OVertex;
import com.orientechnologies.orient.core.sql.executor.OResult;
import com.orientechnologies.orient.core.sql.executor.OResultSet;
import com.orientechnologies.orient.core.id.ORecordId;

import java.text.SimpleDateFormat;
import java.util.*;

import javax.swing.DefaultListModel;
import javax.swing.JTable;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;
import javax.swing.table.DefaultTableModel;

import org.apache.commons.text.similarity.LevenshteinDistance;

import javafx.application.Platform;
import javafx.embed.swing.JFXPanel;
import javafx.scene.Scene;
import javafx.scene.web.WebView;
import java.awt.BorderLayout;



public class Interface_app extends javax.swing.JFrame {
    private SimpleDateFormat sdf = new SimpleDateFormat("HH'h'mm");  // Format de l'heure
    private String time = sdf.format(new Date());
    private OrientDB orientDB = new OrientDB("remote:localhost", OrientDBConfig.defaultConfig());
    private OrientDBConfigBuilder poolCfg = OrientDBConfig.builder()
        .addConfig(OGlobalConfiguration.DB_POOL_MIN, 5)
        .addConfig(OGlobalConfiguration.DB_POOL_MAX, 20);
    private ODatabasePool pool;
    private MyLiveQueryListener listenerC;
    private DefaultTableModel modelC;
    
    // Method to retrieve the model from MyLiveQueryListener
    private DefaultListModel<String> listModelC;
    private OLiveQueryMonitor monitorC;
    private DefaultTableModel modelE;
    private DefaultListModel<String> listModelE;
    private MyLiveQueryListener listenerE;
    private OLiveQueryMonitor monitorE;
    private Ajout_BDD_Frame Ajout_BDD_Frame; 
    private Connexion_Frame Connexion_Frame;
    private Modification_Frame Modification_Frame;
    private Graphe Graphe;
    private DefaultListModel<String> listModel;
    private String className;
    // Définition des en-têtes en HTML
    private final String[] header = {
    "Famille", "Type", "SousFamille", "Constructeur", "Tension", 
    "Puiss.Unit", "Puiss.Trans", "Indice", "Origine", "ID"
    };
    public Interface_app() {
        modelC = new DefaultTableModel();
        initComponents();
        connexion_OrientDB();
    }
    public void printMessage(String message) {
        // Récupérer l'heure actuelle
        SimpleDateFormat sdf = new SimpleDateFormat("HH'h'mm:ss.SSS");  // Format de l'heure
        String time = sdf.format(new Date());  // Obtenir l'heure actuelle

        // Construire le message avec l'heure
        String formattedMessage = time + " : " + message + "\n";

        // Ajouter le message à la JTextArea
        jTextArea1.append(formattedMessage);
        
        // Faire défiler jusqu'à la fin pour afficher le dernier message
        jTextArea1.setCaretPosition(jTextArea1.getDocument().getLength());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel7 = new javax.swing.JPanel();
        jTextField8 = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jPanel6 = new javax.swing.JPanel();
        jButton6 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jPanel8 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jButton7 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel4.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        jLabel10.setText("Equipement");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Famille", "Type", "Sous Famille", "Constructeur", "Tension(VCC)", "Puissance Unitaire(W)", "Puissance Transitoire(W)", "Indice de confiance", "Origine de consommation", "ID"
            }
        ));
        jScrollPane3.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane3))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel7.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        jTextField8.setToolTipText("");
        jTextField8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField8ActionPerformed(evt);
            }
        });

        jButton3.setText("Supprimer");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Dupliquer");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Modifier");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jLabel12.setText("Recherche");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTextField8, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, 179, Short.MAX_VALUE)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel12)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(55, 55, 55)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTextField8.getAccessibleContext().setAccessibleName("Recherche");

        jPanel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        jLabel1.setLabelFor(jPanel1);
        jLabel1.setText("Interface Assystem Bilan de Puissance");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jPanel3.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        jLabel8.setText("Se connecter à la base de données");

        jButton1.setText("Connexion");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Ajouter à la BDD");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel6.setText("Ajouter un composant ou un équipement à la base de données");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(110, 110, 110)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(124, 124, 124)
                        .addComponent(jLabel8)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(102, 102, 102))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(27, 27, 27))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36))
        );

        jPanel5.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        jLabel11.setText("Composant");

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Famille", "Type", "Sous Famille", "Constructeur", "Tension(VCC)", "Puissance Unitaire(W)", "Puissance Transitoire(W)", "Indice de confiance", "Origine de consommation", "ID"
            }
        ));
        jScrollPane4.setViewportView(jTable2);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane4))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jButton6.setText("Deconnexion");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1104, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(13, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.CENTER, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, 0)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Interface AS", jPanel2);

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1410, Short.MAX_VALUE)
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 950, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Orient DB", jPanel8);

        jButton7.setText("Voir Graphe");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jLabel2.setText("Visualiser et modifier le Graphe");

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addContainerGap(1218, Short.MAX_VALUE))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(881, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Création de bilan de puissance", jPanel9);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
        
    private void connexion_OrientDB() {
        /*Code JPanel8 fenêtre OrientDB */
        JFXPanel jfxPanel = new JFXPanel();
        Platform.runLater(() -> {
            WebView webView = new WebView();
            webView.getEngine().load("http://localhost:2480/studio/index.html#/database/test/graph");
            jfxPanel.setScene(new Scene(webView, jPanel8.getWidth(), jPanel8.getHeight()));
            jPanel8.setLayout(new BorderLayout());
            jPanel8.add(jfxPanel, BorderLayout.CENTER);
            jPanel8.validate();
        });
    }
    
    private boolean isMatch(String input, String element, LevenshteinDistance levenshtein) {
        // Diviser l'élément en mots
        String[] words = element.split("\\s+");
        for (String word : words) {
            if (word.startsWith("ID:")) continue; // Ignorer les IDs
            int distance = levenshtein.apply(input, word.toLowerCase());
            if (distance <= 3) { // Ajustez le seuil
                return true;
            }
        }
        return false;
    }

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        Graphe = new Graphe(pool,this);
        Graphe.setVisible(true);
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        if (pool == null) {
            printMessage("Action impossible, la connexion n'est pas établie");
            return;
        }
        try {
            if (monitorC != null) {
                monitorC.unSubscribe();
                monitorC = null;
            }
            if (monitorE != null) {
                monitorE.unSubscribe();
                monitorE = null;
            }
            if (pool != null && !pool.isClosed()) {
                Thread.sleep(1000); // Give time for unsubscribe to complete
                pool.close();
                pool = null;
                printMessage("Le pool de connexions a été fermé.");
                jTable1.setModel(new javax.swing.table.DefaultTableModel());
                jTable2.setModel(new javax.swing.table.DefaultTableModel());
            } else {
                printMessage("Le pool de connexions est déjà fermé ou non initialisé.");
            }
        } catch (InterruptedException ie) {
            printMessage("Interrupted lors de la fermeture des connexions : " + ie.getMessage());
            Thread.currentThread().interrupt();
        } catch (Exception e) {
            printMessage("Erreur lors de la fermeture des connexions : " + e.getMessage());
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    // Fonction pour charger les données initiales dans un DefaultTableModel
    private DefaultTableModel loadInitialDataIntoTableModel(ODatabaseSession db, String className) {
    // Initialiser les colonnes de votre table
    String[] columnNames = {
        "Famille", "Type", "Sous Famille", "Constructeur",
        "Tension(VCC)", "Puissance Unitaire(W)", "Puissance Transitoire(W)",
        "Indice de confiance", "Origine de consommation", "ID"
    };
    DefaultTableModel model = new DefaultTableModel(columnNames, 0);

    // Initialiser listModel si ce n'est pas déjà fait
    if (className.equals("Composant") && listModelC == null) {
        listModelC = new DefaultListModel<>();
    } else if (className.equals("Equipement") && listModelE == null) {
        listModelE = new DefaultListModel<>();
    }

    // Charger les données depuis la base de données
    try (OResultSet rs = db.query("SELECT * FROM " + className)) {
        while (rs.hasNext()) {
            OResult item = rs.next();
            Object[] rowData = {
                item.getProperty("Famille"),
                item.getProperty("Type"),
                item.getProperty("Sous Famille"),
                item.getProperty("Constructeur"),
                item.getProperty("Tension(VCC)"),
                item.getProperty("Puissance Unitaire(W)"),
                item.getProperty("Puissance Transitoire(W)"),
                item.getProperty("Indice de confiance"),
                item.getProperty("Origine de consommation"),
                // ID placed as the last column
                item.getIdentity().toString().replaceAll("Optional\\[(.*)\\]", "$1")
            };
            model.addRow(rowData);
        }
    }
    return model;
    }

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if (pool == null) {
            printMessage("Action impossible, la connexion n'est pas établie");
            return;
        }
        Ajout_BDD_Frame = new Ajout_BDD_Frame(pool,this);
        Ajout_BDD_Frame.setVisible(true);
    }//GEN-LAST:event_jButton2ActionPerformed

    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {
    if (pool != null && !pool.isClosed()) {
        printMessage("Action impossible, connexion déjà établie");
        return;
    }//GEN-LAST:event_jButton1ActionPerformed

    Connexion_Frame connexionFrame = new Connexion_Frame(this);
    connexionFrame.setVisible(true);

    new SwingWorker<Void, Void>() {
        @Override
        protected Void doInBackground() throws Exception {
            // Attendre que l'utilisateur termine (polling)
            while (connexionFrame.isVisible()) {
                Thread.sleep(100); // Intervalle de polling (100ms)
            }
            return null;
        }

        @Override
        protected void done() {
            // Récupérer les informations de connexion après la fermeture de la fenêtre
            String BDD = connexionFrame.getBDD();
            String User = connexionFrame.getUser();
            String Password = connexionFrame.getPassword();

            if (BDD != null && User != null && Password != null) {
                try {
                    // Initialiser le pool de connexions
                    pool = new ODatabasePool(orientDB, BDD, User, Password, poolCfg.build());
                    printMessage("Connexion réussie à la base de données : " + BDD);

                    // SwingWorker pour charger les données d'Equipement
                    new SwingWorker<DefaultTableModel, Void>() {
                        @Override
                        protected DefaultTableModel doInBackground() throws Exception {
                            try (ODatabaseSession db = pool.acquire()) {
                                // Créer les classes si elles n'existent pas
                                if (!db.getMetadata().getSchema().existsClass("Equipement")) {
                                    db.getMetadata().getSchema().createClass("Equipement", db.getMetadata().getSchema().getClass("V"));
                                    printMessage("La classe Equipement a été créée dans le schéma.");
                                }
                                // Charger les données pour Equipement
                                modelE = loadInitialDataIntoTableModel(db, "Equipement");
                                return modelE;
                            }
                        }

                        @Override
                        protected void done() {
                            try {
                                listenerE = new MyLiveQueryListener(jTable1, "Equipement",pool.acquire(),modelE,modelC);
                                listenerE.loadInitialData();
                                monitorE = pool.acquire().live("SELECT FROM Equipement", listenerE);
                            } catch (Exception e) {
                                printMessage("Erreur d'exécution lors du chargement des données pour Equipement : " + e.getMessage());
                            }
                        }
                    }.execute();

                    // SwingWorker pour charger les données de Composant
                    new SwingWorker<DefaultTableModel, Void>() {
                        @Override
                        protected DefaultTableModel doInBackground() throws Exception {
                            try (ODatabaseSession db = pool.acquire()) {
                                // Créer les classes si elles n'existent pas
                                if (!db.getMetadata().getSchema().existsClass("Composant")) {
                                    db.getMetadata().getSchema().createClass("Composant", db.getMetadata().getSchema().getClass("V"));
                                    printMessage("La classe Composant a été créée dans le schéma.");
                                }
                                // Charger les données pour Composant
                                modelC = loadInitialDataIntoTableModel(db, "Composant");
                                return modelC;
                            }
                        }
                        
                        @Override
                        protected void done() {
                            try {
                                listenerC = new MyLiveQueryListener(jTable2, "Composant", pool.acquire(),modelE,modelC);
                                listenerC.loadInitialData();
                                monitorC = pool.acquire().live("SELECT FROM Composant", listenerC);
                            } catch (Exception e) {
                                printMessage("Erreur lors du chargement des données pour Composant : " + e.getMessage());
                            }
                        }
                    }.execute();

                } catch (Exception e) {
                    printMessage("Erreur lors de la connexion : " + e.getMessage());
                }
            } else {
                printMessage("Connexion annulée par l'utilisateur.");
            }
        }
    }.execute();
}

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        if (pool == null) {
            printMessage("Action impossible, la connexion n'est pas établie");
            return;
        }
        ODatabaseSession db = pool.acquire();
        // Liste des propriétés associées
        String[] propertyKeys = {
            "Famille",
            "Type",
            "Sous Famille",
            "Constructeur",
            "Tension(VCC)",
            "Puissance Unitaire(W)",
            "Puissance Transitoire(W)",
            "Indice de confiance",
            "Origine de consommation",
        };
        // Récupérer les lignes sélectionnées dans jTable1
        int[] selectedRows1 = jTable1.getSelectedRows();
        // Récupérer les lignes sélectionnées dans jTable2
        int[] selectedRows2 = jTable2.getSelectedRows();
        if (selectedRows1.length == 0 && selectedRows2.length == 0){
            printMessage("Pas d'éléments sélectionnés pour la duplication");
            return;
        }
        // Duplication pour jTable1 (Equipement)
        for (int row : selectedRows1) {
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            List<String> rowValues = new ArrayList<>();
            for (int col = 0; col < 9; col++) {
                Object value = model.getValueAt(row, col);
                rowValues.add(value != null ? value.toString().trim() : "");
            }
            try {
                printMessage("Tentative de duplication du vertex Equipement");
                OVertex v = db.newVertex("Equipement");
                for (int i = 0; i < propertyKeys.length; i++) {
                    v.setProperty(propertyKeys[i], rowValues.get(i));
                }
                // Utiliser db.save(v) pour éviter l'utilisation de la méthode dépréciée
                db.save(v);
                printMessage("Le Vertex Equipement a bien été dupliqué");
            } catch (Exception e) {
                printMessage("Erreur lors de la duplication (Equipement) : " + e.getMessage());
                // Remplacer e.printStackTrace() par un log via printMessage
                // e.printStackTrace();
            }
        }
        // Duplication pour jTable2 (Composant)
        for (int row : selectedRows2) {
            DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
            List<String> rowValues = new ArrayList<>();
            for (int col = 0; col < 9; col++) {
                Object value = model.getValueAt(row, col);
                rowValues.add(value != null ? value.toString().trim() : "");
            }
            try {
                printMessage("Tentative de duplication du vertex Composant");
                OVertex v = db.newVertex("Composant");
                for (int i = 0; i < propertyKeys.length; i++) {
                    v.setProperty(propertyKeys[i], rowValues.get(i));
                }
                // Utiliser db.save(v) pour éviter l'utilisation de la méthode dépréciée
                db.save(v);
                printMessage("Le Vertex Composant a bien été dupliqué");
            } catch (Exception e) {
                printMessage("Erreur lors de la duplication (Composant) : " + e.getMessage());
                // Remplacer e.printStackTrace() par un log via printMessage
                // e.printStackTrace();
            }
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        if (pool == null) {
            printMessage("Action impossible, la connexion n'est pas établie");
            return;
        }
        ODatabaseSession db = pool.acquire();

        // Récupérer les éléments sélectionnés dans jTable1 et jTable2
        int[] selectedRows1 = jTable1.getSelectedRows();
        int[] selectedRows2 = jTable2.getSelectedRows();

        // Supprimer les éléments sélectionnés de la base de données pour jTable1 (Equipement)
        for (int row : selectedRows1) {
            try {
                // Récupérer l'ID du vertex depuis le modèle (colonne 9)
                Object idValue = jTable1.getModel().getValueAt(row, 9);
                if (idValue != null) {
                    String vertexId = idValue.toString();
                    ORecordId recordId = new ORecordId(vertexId);
                    OVertex vertex = db.load(recordId);
                    if (vertex != null) {
                        db.delete(vertex);  // Supprimer le vertex via le pool
                        printMessage("Éléments supprimés avec succès !");
                    }
                }
            } catch (Exception e) {
                System.err.println("Erreur lors de la suppression (Equipement) : " + e.getMessage());
            }
        }

        // Supprimer les éléments sélectionnés de la base de données pour jTable2 (Composant)
        for (int row : selectedRows2) {
            try {
                // Récupérer l'ID du vertex depuis le modèle (colonne 9)
                Object idValue = jTable2.getModel().getValueAt(row, 9);
                if (idValue != null) {
                    String vertexId = idValue.toString();
                    ORecordId recordId = new ORecordId(vertexId);
                    OVertex vertex = db.load(recordId);
                    if (vertex != null) {
                        db.delete(vertex);  // Supprimer le vertex via le pool
                        printMessage("Éléments supprimés avec succès !");
                    }
                }
            } catch (Exception e) {
                System.err.println("Erreur lors de la suppression (Composant) : " + e.getMessage());
            }
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jTextField8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField8ActionPerformed
        String input = getTextFromAccessibleName("Recherche").trim().toLowerCase();
        // Si la recherche est vide, restaurer les modèles d'origine
        if (input.isEmpty()) {
            jTable1.setModel(modelE);
            jTable2.setModel(modelC);
            return;
        }
        LevenshteinDistance levenshtein = new LevenshteinDistance();

        // Filtrer jTable1 (par exemple, Equipement)
        DefaultTableModel originalModel1 = (DefaultTableModel) jTable1.getModel();
        DefaultTableModel filteredModel1 = new DefaultTableModel();
        int colCount1 = originalModel1.getColumnCount();
        for (int col = 0; col < colCount1; col++) {
            filteredModel1.addColumn(originalModel1.getColumnName(col));
        }
        int rowCount1 = originalModel1.getRowCount();
        for (int i = 0; i < rowCount1; i++) {
            boolean matches = false;
            for (int j = 0; j < colCount1; j++) {
            Object value = originalModel1.getValueAt(i, j);
            if (value != null) {
                String text = value.toString().toLowerCase();
                if (isMatch(input, text, levenshtein)) {
                matches = true;
                break;
                }
            }
            }
            if (matches) {
            filteredModel1.addRow((Vector) originalModel1.getDataVector().elementAt(i));
            }
        }
        if (filteredModel1.getRowCount() == 0) {
            printMessage("Aucun élément trouvé dans jTable1, restauration de la table d'origine.");
            jTable1.setModel(modelE);
        } else {
            jTable1.setModel(filteredModel1);
        }

        // Filtrer jTable2 (par exemple, Composant)
        DefaultTableModel originalModel2 = (DefaultTableModel) jTable2.getModel();
        DefaultTableModel filteredModel2 = new DefaultTableModel();
        int colCount2 = originalModel2.getColumnCount();
        for (int col = 0; col < colCount2; col++) {
            filteredModel2.addColumn(originalModel2.getColumnName(col));
        }
        int rowCount2 = originalModel2.getRowCount();
        for (int i = 0; i < rowCount2; i++) {
            boolean matches = false;
            for (int j = 0; j < colCount2; j++) {
            Object value = originalModel2.getValueAt(i, j);
            if (value != null) {
                String text = value.toString().toLowerCase();
                if (isMatch(input, text, levenshtein)) {
                matches = true;
                break;
                }
            }
            }
            if (matches) {
            filteredModel2.addRow((Vector) originalModel2.getDataVector().elementAt(i));
            }
        }
        if (filteredModel2.getRowCount() == 0) {
            printMessage("Aucun élément trouvé dans jTable2, restauration de la table d'origine.");
            jTable2.setModel(modelC);
        } else {
            jTable2.setModel(filteredModel2);
        }
    }//GEN-LAST:event_jTextField8ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent unusedEvt) {                                         
        if (pool == null) {
            printMessage("Action impossible, la connexion n'est pas établie");
            return;
        }  
        ODatabaseSession db = pool.acquire();
        
        // Vérifier s'il y a des lignes sélectionnées dans l'une ou l'autre JTable
        int[] selectedRows1 = jTable1.getSelectedRows();
        int[] selectedRows2 = jTable2.getSelectedRows();
        if (selectedRows1.length == 0 && selectedRows2.length == 0) {
            printMessage("Pas d'éléments sélectionnés pour la modification");
            return;
        }
        
        // Modification pour jTable1 (Equipement)
        DefaultTableModel localModelE = (DefaultTableModel) jTable1.getModel();
        int columnCountE = localModelE.getColumnCount();
        for (int row : selectedRows1) {
            List<String> infoE = new ArrayList<>();
            // Ajouter "Equipement" comme premier élément
            infoE.add("Equipement");
            // Récupérer toutes les colonnes de la ligne sélectionnée sauf le dernier (par exemple, l'ID)
            for (int col = 0; col < columnCountE; col++) {
                Object value = localModelE.getValueAt(row, col);
                infoE.add(value != null ? value.toString().trim() : "");
            }
            Modification_Frame modificationFrame = new Modification_Frame(infoE, db);
            modificationFrame.setVisible(true);
        }
        
        // Modification pour jTable2 (Composant)
        DefaultTableModel localModelC = (DefaultTableModel) jTable2.getModel();
        int columnCountC = localModelC.getColumnCount();
        for (int row : selectedRows2) {
            List<String> infoC = new ArrayList<>();
            // Ajouter "Composant" comme premier élément
            infoC.add("Composant");
            // Récupérer toutes les colonnes de la ligne sélectionnée sauf le dernier (par exemple, l'ID)
            for (int col = 0; col < columnCountC; col++) {
                Object value = localModelC.getValueAt(row, col);
                infoC.add(value != null ? value.toString().trim() : "");
            }
            Modification_Frame modificationFrame = new Modification_Frame(infoC, db);
            modificationFrame.setVisible(true);
        } 
    }//GEN-LAST:event_jButton5ActionPerformed
    
    public String getTextFromAccessibleName(String accessibleName) {
        return getTextFromAccessibleNameRecursive(getContentPane(), accessibleName);
    }

    public String getTextFromAccessibleNameRecursive(java.awt.Container container, String accessibleName) {
        for (java.awt.Component comp : container.getComponents()) {
            // Vérifier si le composant est un JTextField
            if (comp instanceof javax.swing.JTextField) {
                javax.swing.JTextField textField = (javax.swing.JTextField) comp;
                if (accessibleName.equals(textField.getAccessibleContext().getAccessibleName())) {
                    return textField.getText();
                }
            }    
        // Vérifier si le composant est un JComboBox
            else if (comp instanceof javax.swing.JComboBox) {
                javax.swing.JComboBox<?> comboBox = (javax.swing.JComboBox<?>) comp;
                if (accessibleName.equals(comboBox.getAccessibleContext().getAccessibleName())) {
                    // Récupérer la valeur sélectionnée dans la combobox
                    Object selectedItem = comboBox.getSelectedItem();
                    return selectedItem != null ? selectedItem.toString() : ""; // Retourne une chaîne vide si aucun élément n'est sélectionné
                }
            }
            // Rechercher récursivement dans les sous-conteneurs
            else if (comp instanceof java.awt.Container) {
                String result = getTextFromAccessibleNameRecursive((java.awt.Container) comp, accessibleName);
                if (!result.isEmpty()) {
                    return result;
                }
            }
        }
        return "";  // Retourne une chaîne vide si le champ ou la combobox n'est pas trouvé
    }
    
    public static void main(String args[]) {
        Interface_app interface_app = new Interface_app();
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Interface_app().setVisible(true);
            }
        }); 
    }

    public void setJframeAjout_BDD(Ajout_BDD_Frame Ajout_BDD_Frame){
        this.Ajout_BDD_Frame = Ajout_BDD_Frame;
    }
    public void setJframeConnexion_BDD(Connexion_Frame Connexion_Frame){
        this.Connexion_Frame = Connexion_Frame;
    }
    public void setJframeGraphe_BDD(Graphe Graphe){
        this.Graphe = Graphe;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField8;
    // End of variables declaration//GEN-END:variables
}
